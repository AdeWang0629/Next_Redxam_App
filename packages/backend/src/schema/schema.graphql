type TokenWallet {
  BTC: SimpleWallet
  TEST_BTC: SimpleWallet
}
type SimpleWallet {
  address: String
  wif: String
  txsCount: Int
}
type Deposits {
  _id: String
  userId: String
  type: String
  amount: Float
  index: Int
  currency: String
  timestamp: Float
  processedByRedxam: Boolean
  status: String
  hash: String
  address: String
  bankIcon: String
  bankName: String
  bankType: String
  email: String
}
type InternalDeposits {
  userId: String
  type: String
  amount: Float
  currency: String
  timestamp: Float
  hash: String
  address: String
}

type InternalDepositsResponse {
  internalDeposits: [InternalDeposits]
  success: Boolean
  message: String
}

type User {
  _id: ID!
  firstName: String
  lastName: String
  email: String!
  phone: String
  wallets: TokenWallet
  wallet: SimpleWallet
  contribution: Float
  level: Int
  verification: Boolean!
  token: String
  pending_balance: Float
  balance: Int
  accountBalance: Int
  accountStatus: String
  hasPendingTxs: Boolean!
  deposited: Float
  withdrawn: Float
  created_at: String
  portfolio: String
  referralCode: String
  referralId: String
  discordId: String
}

type BalanceRecords {
  balance: Float
  timestamp: Float
}

type Referrer {
  _id: ID!
  statuses: String
  referrers: String
}
input NewUser {
  firstName: String
  lastName: String
  email: String!
  phone: String
  birthPlace: String
  title: String
  address: String
  nearestLandmark: String
  state: String
  marriedStatus: String
  occupation: String
  identityIDType: String
  identityIDNumber: String
  issuance: String
  issuancePlace: String
  issuanceDate: String
  issuanceStatus: String
  expiringDate: String
  referralCode: String
}
input NewManualUser {
  name: String!
  email: String!
  phone: String!
}
input LoginInput {
  email: String
  phone: String
}
input SpoofInput {
  email: String
}
input VerifyInput {
  token: String
  phone: String
  code: String
}
input SendReferInput {
  token: String
  email: String
}

input newAdmin {
  email: String!
  password: String!
  avatar: String!
  firstName: String!
  lastName: String!
}

input ContactForm {
  firstName: String!
  lastName: String
  email: String!
  question: String!
}

input UpdateStatus {
  email: String!
  status: String!
}

input UpdateDeposit {
  depositId: String!
  status: String!
}

type Response {
  success: Boolean!
  message: String!
  token: String
  level: Int
}

type VaultData {
  prevBalance: Float
  amount: Float
  balance: Float
  interestRate: Float
  token: String
  tokenBalance: Float
}

type VaultTokens {
  aave: VaultData
  harvest: VaultData
  fulcrum: VaultData
}

type Vaults {
  vaults: VaultTokens
  type: String
  totalContribution: Float
}

type adminToken {
  token: String
}

type admin {
  email: String
  token: String
}

type home {
  deposits: [Deposits]
  balance: Float
  percentChange: Float
  dolarChange: Float
}

type FeatureFlag {
  status: Boolean
}

type overview {
  totalUsers: Float
  invitedUsers: Float
  acceptedUsers: Float
  usersWithBalance: Float
}

input check {
  code: String
}

type WaitlistLevel {
  message: String
  success: Boolean
  referralCode: String
  level: String
}

type WidgetUrl {
  widgetUrl: String
}

type referralUpdatedUsers {
  userId: String
  referralCode: String
  waitlistToken: String
}

type UpdateReferral {
  message: String
  success: Boolean
  updatedUsers: [referralUpdatedUsers]
  amount: Int
}

type TellerAccounts {
  message: String
  success: Boolean
  accountId: String
  balance: Float
  bankName: String
}

type TellerPayee {
  message: String
  success: Boolean
  payeeId: String
  connect_token: String
}

type TellerPayment {
  message: String
  success: Boolean
  paymentId: String
  connect_token: String
}

input TellerPaymentInput {
  accountId: String!
  amount: String!
  memo: String
  bankName: String!
  userId: String!
}

input TellerPaymentVerifiedInput {
  amount: String!
  paymentId: String!
  bankName: String!
  userId: String!
}

type InvitationCode {
  success: Boolean
  message: String
  token: String
}

type GetPayee {
  success: Boolean
  message: String
  payeeId: String
}

type GetLeanCustomerId {
  success: Boolean
  message: String
  customerId: String
}

input CreatePaymentIntentInput {
  userId: String
  amount: Float
}

type CreatePaymentIntent {
  success: Boolean
  message: String
  paymentIntentId: String
}

type AdminDeposit {
  deposits: [Deposits]
  success: Boolean
  message: String
}

type CreateWaitlist {
  referralCode: String
  level: Int
  success: Boolean
  message: String
}

type Query {
  users: [User]
  user: [User]
  getWaitList: [Referrer]
  userDeposits: [Deposits]
  vaults: Vaults
  balanceRecords: [BalanceRecords]
  adminLogin: adminToken
  admin: admin
  home: home
  featureFlag: FeatureFlag
  startTwilioVerify: Response
  checkTwilioVerify(arg: check): Response
  overview: overview
  waitlistLevel(waitlistToken: String): WaitlistLevel
  internalDeposits: InternalDepositsResponse
  mxWidgetConnect: WidgetUrl
  updateReferral: UpdateReferral
  emailValidation(arg: NewUser): Response
  signup(arg: NewUser): Response
  contactForm(arg: ContactForm): Response
  tellerAccounts(userId: String): TellerAccounts
  tellerPayee(accountId: String): TellerPayee
  tellerPayment(arg: TellerPaymentInput): TellerPayment
  tellerPaymentVerified(arg: TellerPaymentVerifiedInput): Response
  getPayee(accountId: String): GetPayee
  getLeanCustomerId(userId: String): GetLeanCustomerId
  createPaymentIntent(arg: CreatePaymentIntentInput): CreatePaymentIntent
  getDeposits: AdminDeposit
}

type Mutation {
  createUser(arg: NewUser): Response
  updateToken(arg: LoginInput): Response
  verifyToken(arg: VerifyInput): Response
  sendReferral(arg: SendReferInput): Response
  goUpQueue: Response
  createWaitlist(arg: NewUser): CreateWaitlist
  inviteUser(arg: NewUser): Response
  invitationCode(code: String): InvitationCode
  emailValidateToken: Response
  createManualUser(arg: NewManualUser): Response
  createAdmin(arg: newAdmin): Response
  changeRequest(arg: String): Response
  changeAccountStatus(arg: String): Response
  addDiscord(arg: String): Response
  updateWallets: Response
  updateUserStatus(arg: UpdateStatus): Response
  updateDepositStatus(arg: UpdateDeposit): Response
  spoofAccount(arg: SpoofInput): Response
}
